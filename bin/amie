#!/usr/bin/env python
import sys, os, getopt, logging
import pprintpp
pprintpp.monkeypatch()
import pprint
from pathlib import Path
from config import ConfigLoader
from miscfuncs import truthy
from amieclient import AMIEClient
from configdefaults import DFLT
from serviceprovider import ServiceProvider
from mediator import AMIEMediator

PROG = "amie"
PROG_UNL = "===="
DESC = "Process AMIE packets with a custom Service Provider plugin"
USAGE = os.environ.get('USAGE',None)
USAGE1 = PROG + " [-D] [-c|--configfile=<file>] [-s|--site=<site>] [-o|--once]"
USAGE2 = PROG + " [-D] [-c|--configfile=<file>] [-s|--site=<site>] " +\
    "-p|--persistent"
USAGE3 = PROG + " [-D] [-c|--configfile=<file>] [-s|--site=<site>] -l|--list"
USAGE4 = PROG + " [-D] [-c|--configfile=<file>] [-s|--site=<site>] " +\
    "-f|--fail=<trid>"
USAGE5 = PROG + " [-D] [-c|--configfile=<file>] [-s|--site=<site>] --showconfig [-X]"
USAGE6 = PROG + " -h|--help"
USAGE = f'''
       {USAGE1}

         or

       {USAGE2}

         or

       {USAGE3}

         or

       {USAGE4}

         or

       {USAGE5}

         or

       {USAGE6}'''

DEBUG_MODE = False


LOCALSITE_INTRO_TEXT = ""
INTRO_TEXT = f'''
The **{PROG}** program mediates between the central AMIE service and the local
"Service Provider". It normally runs in a loop as a daemon: it periodically
polls the AMIE service for updates, breaks down AMIE requests into smaller
tasks that it submits to the service provider back-end, assembles task results
into AMIE response packets, and sends responses back to the AMIE service.'''

DEBUG_TEXT = f'''
  ``-D``
      If included, add a standard error handler to all loggers with level
      set to DEBUG.'''

LOCALSITE_OPTIONS_TEXT = f'''
  ``-c|--configfile``
      Configuration (``ini``) file. If not specified, the ``CONFIG_INI``
      environment variable will be checked for the name of a file; otherwise,
      ``./config.ini`` is assumed. See **Configuration** below.

  ``-s|--site``
      Local site name. If not specified, the configuration file must have a
      ``site`` property in a ``[amieclient]`` section.'''

OPTIONS_TEXT = f'''
  ``-o|--once``
      Normally, ``{PROG}`` retrieves all in-progress packets from the AMIE
      server, processes them all to the extent that it can without waiting for
      the local service provider, and then repeats, indefinitely. The ``--once``
      flag will run through the process once without repeating.

  ``-p|--persistent``
      Normally, ``{PROG}`` will exit if the service provider encounters an error
      that is considered a temporary error that is not a simple timeout (e.g. a
      ``Connection refused`` error). The --persistent flag will cause ``{PROG}``
      to keep retrying when it encounters this type of error.

  ``-l|--list``
      List all AMIE packets and exit.

  ``-f|--fail``
      Set the status of the indicated transacton to ``Failed``, then exit.

  ``--showconfig``
      Display the current configuration and exit. Unless the ``-X`` flag is
      included, parameters that are flagged as secrets have their values hidden.

  ``-X``
      If included with --showconfig, display all configuration parameter
      values, including those flagged as secret.

  ``-h|--help``
      Display help test and quit
'''

AMIE_CONFIG_TEXT = f'''
The configuration should include at least a ``[global]`` section, an
``[amieclient]`` section, a ``[logging]`` section, a ``[mediator]`` section,
and a ``[localsite]`` section.

The ``[global]`` section supports the following keys:

  ``pause_max``
      Maximum seconds to wait (via ``time.sleep()``, API call, or otherwise)
      without doing anything. This applies to individual pauses, not overall
      loop delays. This allows for out-of-band events, logging, etc. to be
      serviced regularly. Default={DFLT["pause_max"]}.

  ``site_name``
      Required if the ``-s|--site`` option is not given on the command line;
      the name of the local site as known to AMIE.

The ``[amieclient]`` section supports the following keys:

  ``amie_url``
      Required; the URL of the central AMIE server.

  ``amie_key``
      Required; the site-specific authentication key for the AMIE server.

The ``[logging]`` section supports the following keys:

  ``filename``
      File destination for root logger.

  ``filemode``
      File mode for root logger. Default = ``a``.

  ``format``
      Format string for the root logger.

  ``datefmt``
      Date/time format for the root logger.

  ``style``
      Style to use for root logger, if format is given. Default = ``%``.

  ``level``
      Logging level for the root logger

  ``encoding``
      If ``filename`` is given, encoding to use when opening file for the root
      logger.

  *logger* ``.filename``
      File destination for the indicated logger.

  *logger* ``.filemode``
      File mode for the indicated logger. Default = ``a``.

  *logger* ``.format``
      Format string for the indicated logger.

  *logger* ``.datefmt``
      Date/time format for the indicated logger.

  *logger* ``.style``
      Style to use for the indicated logger, if format is given. Default =
      ``%``.

  *logger* ``.level``
      Logging level for the indicated logger.

  *logger* ``.encoding``
      If *logger* ``.filename`` is given, encoding to use when opening file for
      the indicated logger.

  *logger* ``.propagate``
      Set the ``propagate`` attribute on the logger to the given boolean value.

See the standard Python logging facility (Lib/logging) for more details.
All loggers are configured during runtime initialization.

The ``[mediator]`` section supports the following keys:

  ``snapshot_dir``
      Required; directory for storing JSON snapshot files for status monitoring.
      Default={DFLT["snapshot_dir"]}.

  ``min_retry_delay``
      The minimum time (secs) to wait before retrying when a call to the AMIE
      client fails with a temporary error. The retry loop will double the delay
      on subsequent retry attempts until ``max_retry_delay`` is reached.
      Default={DFLT["min_retry_delay"]}.

  ``max_retry_delay``
      The maximum time (secs) to wait before retrying when a call to the AMIE
      client fails with a temporary error. Default={DFLT["max_retry_delay"]}.

  ``retry_max_time``
      The maximum time (secs) that messages to the AMIE client that get
      temporary errors should be retried before actually failing.
      Default={DFLT["retry_time_max"]}.

  ``idle_loop_delay``
      How long to wait (secs) between queries to AMIE when idle (i.e. when no
      specific packets are expected). Default={DFLT["idle_loop_delay"]}.

  ``busy_loop_delay``
      How long to wait (secs) between queries to AMIE when busy (i.e., when
      specific packets are expected). Default={DFLT["busy_loop_delay"]}.

  ``reply_delay``
      How long to wait (secs) after sending a packet to AMIE (other than
      ``inform_transaction_complete``) before checking for a response.
      Default={DFLT["reply_delay"]}.
 
  ``sp_min_retry_delay``
      The minimum time (secs) to wait before retrying when a call to the
      service provider fails with a temporary error. The retry loop will double
      the delay on subsequent retry attempts until ``sp_max_retry_delay`` is
      reached. Default={DFLT["sp_min_retry_delay"]}.

  ``sp_max_retry_delay``
      The maximum time (secs) to wait before retrying when a call to the
      service provider fails with a temporary error. Default={DFLT["sp_max_retry_delay"]}.

  ``sp_retry_time_max``
      The maximum time (secs) that Service Provider operations that fail with
      temporary errors should be retried before failing. Default={DFLT["sp_retry_time_max"]}.

The ``[localsite]`` section supports the following keys:

  ``package``
      Required; the name of the package that implements the local service
      provider.

  ``module``
      Required; the name of the module that implements the local service
      provider.'''

LOCALSITE_CONFIG_TEXT = f'''
All other keys in the ``[localsite]`` section are unique to the
Service Provider.
'''

SECRET_PARMS = [ 'api_key' ]
LOCALSITE_SECRET_PARMS = os.environ.get('LOCALSITE_SECRET_PARMS',None)
if LOCALSITE_SECRET_PARMS is not None:
    SECRET_PARMS.extend(LOCALSITE_SECRET_PARMS.split(" "))

ENVVAR_TEXT = f'''
Environment variables with names beginning with ``GLOBAL_``, ``AMIECLIENT_`` or
``LOCALSITE_`` are treated as "secret" configuration variables that can be
interpolated: the name of the configuration variable is the environment
variable name converted to local case. For example, the environment
variable ``AMIECLIENT_API_KEY`` would become the configuration key
``amieclient_api_key``. This allows secrets to be specified in the
environment and accessed via interpolation without storing them in the
configuration file itself.

If the environment variable ``SECRETS_DIR`` is defined and it names a
directory, that directory is searched for files with names beginning with
``amieclient_`` and ``localsite_``. The contents of those files are also
treated as secret configuration values. The ``AMIECLIENT_`` and ``LOCALSITE_``
environment variables have precedence over SECRETS_DIR files.'''

LOCALSITE_ENV_TEXT = ''

envUSAGE = os.environ.get('USAGE',None)
if envUSAGE is not None:
    USAGE = envUSAGE

envLOCALSITE_INTRO_TEXT = os.environ.get('LOCALSITE_INTRO_TEXT',None)
if envLOCALSITE_INTRO_TEXT is not None:
    LOCALSITE_INTRO_TEXT = envLOCALSITE_INTRO_TEXT

envINTRO_TEXT = os.environ.get('INTRO_TEXT',None)
if envINTRO_TEXT is not None:
    INTRO_TEXT = envINTRO_TEXT

envLOCALSITE_OPTIONS_TEXT = os.environ.get('LOCALSITE_OPTIONS_TEXT',None)
if envLOCALSITE_OPTIONS_TEXT is not None:
    LOCALSITE_OPTIONS_TEXT = envLOCALSITE_OPTIONS_TEXT

envLOCALSITE_CONFIG_TEXT = os.environ.get('LOCALSITE_CONFIG_TEXT',None)
if envLOCALSITE_CONFIG_TEXT is not None:
    LOCALSITE_CONFIG_TEXT = envLOCALSITE_CONFIG_TEXT

envLOCALSITE_ENV_TEXT = os.environ.get('LOCALSITE_ENV_TEXT',None)
if envLOCALSITE_ENV_TEXT is not None:
    LOCALSITE_ENV_TEXT = envLOCALSITE_ENV_TEXT
    
def help():
    help_text = f'''
{PROG}
{PROG_UNL}
    {DESC}

Usage: {USAGE}
{LOCALSITE_INTRO_TEXT}
{INTRO_TEXT}
Options
-------{DEBUG_TEXT}
{LOCALSITE_OPTIONS_TEXT}
{OPTIONS_TEXT}
Configuration
-------------
{AMIE_CONFIG_TEXT}
{LOCALSITE_CONFIG_TEXT}
Environment
-----------
{ENVVAR_TEXT}
{LOCALSITE_ENV_TEXT}
    '''
    print(help_text)

def main(argv):
    run_info = process_command_line_and_configuration(argv)

    once = run_info['once']
    persistent = run_info['persistent']
    list = run_info['list']
    fail = run_info['fail']
    showconfig = run_info['showconfig']
    hide_secrets = not run_info['include_config_secrets']
    combined_config = run_info['config']

    global_config = combined_config['global']

    amie_config = combined_config['amieclient']
    amie_config.update(global_config)

    localsite_config = combined_config['localsite']
    localsite_config.update(global_config)

    mediator_config = combined_config['mediator']
    mediator_config.update(global_config)

    logging_config = combined_config['logging']

    if showconfig:
        pp = pprint.PrettyPrinter(indent=4)
        show_config(pp, hide_secrets, 'global', global_config)
        show_config(pp, hide_secrets, 'amie', amie_config)
        show_config(pp, hide_secrets, 'localsite', localsite_config)
        show_config(pp, hide_secrets, 'mediator', mediator_config)
        show_config(pp, hide_secrets, 'logging', logging_config)
        sys.exit(0)
    
    configure_logging(**logging_config)

    logger = logging.getLogger(None)

    logger.info('Starting ')

    try:
        amie_client = AMIEClient(amie_config['site_name'],
                                 amie_config['api_key'],
                                 amie_config['amie_url'],
                                 )

        if not fail and not list:
            service_provider = ServiceProvider()
            service_provider.apply_config(localsite_config)

        mediator = AMIEMediator(mediator_config, amie_client, service_provider)

        if once:
            mediator.run()
        elif persistent:
            mediator.run_loop_persistently()
        elif list:
            mediator.list_packets()
        elif fail:
            mediator.fail_transaction(fail)
        else:
            mediator.run_loop()

    except Exception as e:
        logger.exception("Exception occurred")

    logger.info('Exiting ' + PROG)

def process_command_line_and_configuration(argv):
    run_info = process_command_line(argv)
    configfile = run_info['configfile']
    site = run_info['site']

    config = ConfigLoader.loadConfig(configfile)
    if site is not None:
        config['global']['site_name'] = site;

    run_info['config'] = config

    return run_info

def process_command_line(argv):
    global DEBUG_MODE
    
    argv.pop(0)
    configfile = os.environ.get('CONFIG_INI','config.ini')
    site = None
    once = False
    persistent = False
    list = False
    fail = False
    showconfig = False
    include_config_secrets = False
    try:
        opts,args = getopt.getopt(argv,"Dhoplf:c:s:X",
                                  [
                                      "help",
                                      "once",
                                      "persistent",
                                      "list",
                                      "fail=",
                                      "configfile=",
                                      "site=",
                                      "showconfig"])
    except getopt.GetoptError as e:
        prog_err(e)
        print_err(USAGE)
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h","--help"):
            help()
            sys.exit(0)
        elif opt in ("-D"):
            DEBUG_MODE = True
        elif opt in ("-c","--configfile"):
            configfile = arg
        elif opt in ("-s","--site"):
            site = arg
        elif opt in ("-o","--once"):
            once = True
        elif opt in ("-p","--persistent"):
            persistent = True
        elif opt in ("-l","--list"):
            list = True
        elif opt in ("-f","--fail"):
            fail = arg
        elif opt in ("--showconfig"):
            showconfig = True
        elif opt in ("-X"):
            include_config_secrets = True

    if DEBUG_MODE:
        sys.stderr.write("DEBUG: sys.path:\n")
        for path in sys.path:
            sys.stderr.write("DEBUG:     " + path + "\n")
            
        sys.stderr.write("DEBUG: configuration file: " + configfile + "\n")

    if not Path(configfile).is_file():
        prog_err("configuration file '" + configfile + "' does not exist")
        sys.exit(2)

    return {
        'configfile': configfile,
        'site': site,
        'once': once,
        'persistent': persistent,
        'list': list,
        'fail': fail,
        'showconfig': showconfig,
        'include_config_secrets': include_config_secrets
    }

def show_config(pp, hide_secrets, name, config):
    if hide_secrets:
        nconfig = dict()
        for key in config.keys():
            if key in SECRET_PARMS:
                nconfig[key] = "*"
            else:
                nconfig[key] = config[key]
        config = nconfig
    print(name, end=": ")
    pp.pprint(config)
    print("")
    

def configure_logging(**config):
    rootconfig = dict()
    subconfigs = dict()
    for key in config.keys():
        value = config[key]
        idx = key.rfind('.')
        if idx > 0:
            path = key[0:idx]
            ckey = key[idx+1:]
            subconfig = subconfigs.get(path,None)
            if subconfig is None:
                subconfig = dict()
                subconfigs[path] = subconfig
            subconfig[ckey] = value
        else:
            rootconfig[key] = value

    if rootconfig:
        logging.basicConfig(**rootconfig)
    for path in subconfigs.keys():
        subconfig = subconfigs[path]
        configure_logger(path,subconfig)

def configure_logger(name, config):
    logger = logging.getLogger(name)
    logger.propagate = truthy(config.get('propagate',"True"))
    filename = config.get('filename',None)
    if filename is not None:
        filemode = config.get('filemode','a')
        encoding = config.get('encoding',None)
        handler = logging.FileHandler(filename,mode=filemode,encoding=encoding)
        format = config.get('format',None)
        datefmt = config.get('datefmt',None)
        style = config.get('style','%')
        formatter = logging.Formatter(fmt=format, datefmt=datefmt, style=style)
        handler.setFormatter(formatter)
        logger.addHandler(handler)
    if DEBUG_MODE:
        D_handler = logging.StreamHandler(sys.stderr)
        D_format = "%%(asctime)s %%(levelname)s:%%(name)s:%%(message)s "
        D_formatter = logging.Formatter(fmt=format)
        D_handler.setFormatter(D_formatter)
        D_handler.setLevel(logging.DEBUG)
        logger.addHandler(D_handler)

    level = config.get('level',None)
    if level:
        logger.setLevel(level)
    
    
def print_err(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

def prog_err(*args, **kwargs):
    sys.stderr.write(PROG + ": ")
    print_err(*args, **kwargs)

if __name__ == '__main__':
    main(sys.argv)
